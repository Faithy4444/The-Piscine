// This is a placeholder file which shows how you can access functions and data defined in other files. You can delete the contents of the file once you have understood how it works.
// It can be run with `node`.

import fs from "fs";
import { writeFileSync } from "fs";
import { createEvents } from "ics";
import { resolveCommemorativeDates } from "./common.mjs";
import daysData from "./days.json" with { type: "json" };

const START_YEAR = 2020;
const END_YEAR = 2030;

async function generateICal() {
  const events = [];

  for (let year = START_YEAR; year <= END_YEAR; year++) {
    // Get commemorative dates for this year
    const commemorativeDates = resolveCommemorativeDates(daysData, year);

    commemorativeDates.forEach(event => {
      const date = event.date;
      const name = event.name;

      // Prepare event date components for ics
      // iCal all-day event date format: [year, month, day]
      // Note: month is 1-based in ics package, but 0-based in JS Date
      events.push({
        start: [date.getFullYear(), date.getMonth() + 1, date.getDate()],
        duration: { days: 1 },
        title: name,
        description: name,
        status: "CONFIRMED",
        busyStatus: "FREE",
        // UID and DTSTAMP are auto-generated by 'ics'
      });
    });
  }

  // Create iCal events
  createEvents(events, (error, value) => {
    if (error) {
      console.error("Error generating iCal:", error);
      return;
    }

    // Write to days.ics
    fs.writeFileSync("days.ics", value);
    console.log("days.ics file created successfully!");
  });
}

generateICal();
